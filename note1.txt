终端使用
tarena @  tedu    ：   ~        $/#（$普通用户，#超级用户）
用户名 @ 计算机名 ： 当前位置   命令提示符
                                使用sudo su进入超级用户
                                使用exit退出超级用户

进制的使用

十进制  满10进1   0--9
二进制  满2进1    0、1
八进制  满8进1    0--7 数字前加0表示八进制数：045
十六进制  满16进1    0--15 数字前加0x表示十六进制数：0xA8
   10 11 12 13 14 15
    A  B  C  D  E  F


十----》二  除以2取余
二----》十  
二----》八 


3f7a
0011 1111 0111 1010

45          10
0010 1101   2
0x2D        16


linux路径
文件夹---》主目录
~ ：当前用户的主目录，系统会自动为每一个用户创建一个文件夹为其主文件夹
/ : 表示根目录
相对路径：../b/5/f，一定不以"/"开头
          ..  表示当前目录的上一级目录
          .   表示当前目录
绝对路径：/a/1/i，一定以"/"开头

shell命令:
命令 [选项] [参数]
*每个部分之间一定要有空格
*选项和参数可有可无，位置比较灵活
  cmd -r abc  /  cmd abc -r / cmd -r abc -r def
 选项：辅助命令进行功能的丰富和细化
       选项的表达必须以 - 作为引导
       如果有多个选项可以表示如下：
       ls -l -a == ls -la
 参数：命令要操作的目标，并非所有命令都可加参数
 *
 打开终端：
 ctrl + alt + t（打开一个主目录终端）
 ctrl + shift + n（打开一个当前目录终端）
 ctrl + shift + t（打开一个当前目录终端）

d(文件类型)rwxr-xr-x (文件权限) 2 tarena tarena    4096 7月  17  2017 音乐
文件类型:
bc    d         -       l          s       p：linux下7种文件
    文件夹  普通文件  链接文件         管道文件
文件权限：读写执行
linux下以.开头的都是隐藏文件。
 
mkdir 创建文件夹
mkdir 文件夹名称
      -p   可以创建多级的目录

rmdir 删除文件夹 
rmdir 要删除的目录名
*只能删除空的目录，不可删除非空目录

rm 删除一个文件
rm [选项] 文件/文件夹
   -r 删除一个文件夹及文件夹内所有内容
   -i 删除前提示（y，n）
   -f 强制删除

cd 切换工作目录
cd [路径]
cd 回到主目录
cd - 在最近工作的两个目录中切换

pwd 打印当前工作目录的绝对路径

touch 创建一个空白文件 
touch 文件名

man 提供shell帮助
man 命令名

tab 自动补全
如果唯一确定，路径会自动补全

Clear=Ctrl+L 清理屏幕

cp 复制文件或文件夹到某个位置
cp [选项] 文件/文件夹（可以为多个） 目标位置
cp re -ra
re为普通文件
1.若第二个参数为文件夹，则表示将第一个参数拷贝到相关位置
2.若第二个参数为文件，则表示将第一个参数另存为相应内容
-a 如果要复制的内容是文件夹，则使用该文件

mv 移动一个文件或文件夹
mv [选项] 文件/文件夹（可以为多个） 目标位置
参数与cp命令相同，移动文件夹不需要选项

通配符:
* 表示任意0个或者多个字符
? 表示任意一个字符
[] 表示任意一个在中括号中的字符

history 查看命令记录
history num 表示查看num条记录
通过↑ ↓可以操作历史记录

cat 查看一个文件中的内容
cat 文件

find 查找文件位置
find 起始路径 -name 文件名
*find可以查找某个目录及其子目录中是否存在目标

grep 在文件中查找某个字符串
grep '字符串' 文件
             -n 查找的同事显示行号
             -r 可以在一个门路下查找其子目录中是否有该字符串
                
临时管理员权限:在命令前加 sudo

chmod 修改文件的权限 读写执行
chmod 权限表述 要修改的文件
用户 用户组 其他用户
rwx   rwx     r-x
chmod a+x 文件名 所有用户加上执行权限
        可组合修改权限：chmod a+xm
        chmod a-x 文件名 所有用户去掉执行权限
        权限：
        w：写权限
        r：读权限
        x：执行权限
        用户：
        a：所有用户
        u：所有者(属主)
        g：同组用户
        o：其他用户
       位掩码：
        000 000 000
        001：执行：1：x
        010：写：2：w
        100：读：4：r
        000：---
        011：-wx
        111：rwx
        101：r-x
        rwx r-x -wx
        111 101 011
        7    5   3
        chmod 644 文件名：rw-r--r--

zip 压缩       
zip 压缩包名 要压缩的文件列表
zip all.zip core file re
unzip 解压压缩包 
unzip 压缩包名

tar 压缩
bz2 gz 格式 
压缩率 bz2 > gz

压缩成bz2 
-c 创建归档
-j 使用bz2格式
-v 显示压缩过程
-f 指定压缩文件
tar -cjvf all.tar.bz2 file*

压缩成gz
-c 创建归档
-z 使用gz格式
-v 显示压缩过程
-f 指定压缩文件
tar -czvf all.tar.bz2 file*

解压（tar）
-x 解压
-xvf  
tar -xvf all2.tar.gz 

exit 关闭终端

sudo apt-get install 软件名
可以进行安装

sudo reboot 重启系统

程序员文本编辑器
notepad
sublime
vim
集成开发工具
pycharm

sublime使用

subl 打开编辑器
subl 文件名/文件夹名 使用sublime打开文件

从文件对应位置终端
在sublime右键“open Terminal Here”

改变字体大小（ctrl + 鼠标滚轮）
ctrl + = 放大
ctrl + - 缩小

view--layout-- 选择窗口显示的方式







python
官网：www.python.org 查看文档，下载第三方包，下载python
特点：1.简单 简洁
      2.功能强大（自动化脚本、爬虫、网站后端、算法、人工智能接口）
      3.运行效率低，开发效率高
      4.代码开放（开源）
      5.Python是一个胶水语言，可以很好的跟其他编程语言交互
      6.Python有很好的跨平台性能
      7.Python是解释性型的、高级的、面向对象的编程语言
        *解释型：需要解释器对程序解释为计算机能识别的内容
        *编译型：需要编译器对程序编译，然后对编译结果进行执行即可

        *面向过程：以语句为中心按步骤办事
        *面向对象：以数据为中心调用对象办事

Python干什么      
自动化运维
数据挖掘工程师（爬虫）
python web工程师
平台开发
大数据处理
人工智能开发

python的安装
linux下无需安装
windows下 1.下载安装包
          2.双击安装
          3.找到python.exe安装路径，添加到环境变量

python的运行：*.交互模式下运行
                进入：python3   ipython
                退出：quit（）  quit
                简单的python语句直接显示结果
              *.运行python程序
                .py 为后缀的文件
                一、
                1.通过sublime编写python程序病保存
                2.在相应的程序目录下通过 python3 文件名 的形式运行程序
                二、
                1.在程序第一行加上解释器位置#!/usr/bin/env python3
                2.文件需添加可执行权限：chmod 766 1.py
                3.在终端通过指明程序的路径即可运行 ：./1.py
python程序的组成：
    数据---》语句---》语句块---》模块---》工程
    程序=算法+数据结构
    python支持的数据类型：
    数字：整书 小数 复数
    字符串：子串 单个字符
    布尔数据：True False
    列表 元组 字典 集合 Nonetype 文件 类类型 对象
数字类型：
    整型 int
    浮点型 float： 1.4*10…^23---->>1.4e+23    1.4*10…^-23---->>1.4e-23
    复数类型 complex
    Nonetype
    
    值：none
    作用：无意义，用作占位；函数无返回值则返回一个None值；有时用作形参的默认值
    运算表达式：
    表达式：由一个数字或者数字与运算符构成
    算数运算符：+ - * /（得到浮点数） //（整除，向下取整） %（取余） **（幂运算）
    优先级：** > / // * % > + -
  **当高精度数据与低精度数据进行运算的时候结果自动转换为高精度
变量和常量
变量：自定义的标识符，用来代表某个值
    1.数字字母下划线组成
    2.不能以数字开头
    3.不能和python保留字重复
    = 赋值符号  左侧为变量，右侧为赋予变量的值
    1.变量初次赋值为变量的初始化
    2.变量可以多次赋值，后赋值内容会覆盖前面的内容
    3.变量没有固定类型，类型由所赋值类型决定
    赋值：a = b = c = 6;a,b = 1,2;a,b = b,a(可用于交换变量值)
    删除变量：del 变量名
常量：不可改变的量
布尔类型（bool）：True(逻辑真)；False(逻辑假)
逻辑判断语句: > < >= <= ==逻辑相等 !=不等于 
              集合 in   not in 
              对象 is   is not
**支持比较运算符的连续书写：a < b < 50;a < b > 20
python中关于True和False的其他规定：
1.False：0 0.0 0+0j none值 空的字符串'' 空的列表[] 空的集合set() 空的元组()  空的字典{}




复合运算符号
+=   a += 2>>>a = a + 2
-=   a -= 2>>>a = a - 2
*=
/=
//=
%=
**=


换行符
\ :代码书写时使用，不影响执行结果效果
   print\
   ("I Love China And I Love Norway ")


注释：对代码的解释说明，在运行过程中不参与程序的运行
      python中使用#引起单行注释，注释通常写在被标注代码的上方或右侧
python中，三引号'''可以当做多行注释使用
良好的代码风格，注释在15%左右



内建函数的使用
内建函数：python提供的已经实现的可以直接使用的函数
abs():求绝对值
      abs(-5) -----> 5
round():四舍五入
      round(num,[ndigits])默认四舍五入到整数，ndigits表示保留小数点后几位
      round(3.1415926)---->3
      round(3.1415926，3)---->3.142
强制转换
int(1.51)--->1
float(3)--->3.0
bool(123)--->True

id() 查看一个量的内存
如果id(a)和id(b)相同，则 a is b 一定为True

type() 查看对象的类型

help() 查看python内建函数或者模块的帮助








pow 函数
    pow(x,y,z=None) 两个参数时相当于x**y，三个参数时相当于x**y%z
    pow(2,3)--->8    pow(2,3,3)--->2

换行：
    1.显式换行：折行号：\
        i = 1 + 2 + 3\
            + 4 + 5
        pirnt(i)   #15 用\显式换行
    2.隐藏式换行：所有的括号内换行，成为隐式换行
        i = (1 + 2 + 3
            + 4 + 5)#括号要成对出现，会隐式换行直到找到对应的括号为止

基本输入输出
1.基本输入函数 input
    作用：从标准输入设备上读取一个字符串（末尾的换行符会被删除）
    格式：input("提示字符串")
    说明：返回输入的字符串(仅python3)
          '提示字符串'可以为空     
2.基本输出函数 print
    作用：将一系列的值以字符串形式疏忽到标准输出设备上，默认为终端
    格式：print(value,...,sep='',end='\n')
    说明：选项的关键字参数为：
          sep 两个值之间的分隔符，默认为一个空格
          end 输出完毕之后在末尾自动追加一个字符，默认为换行符'\n'

if 语句
   作用：让程序根据条件选择性的执行某条语句或某些语句
   说明：if 语句又叫条件语句，也叫分支语句
   语法：if 真值表达式1:
             语句块1
         elif 真值表达式2:
             语句块2
         elif 针织表达式3：
             语句块3
             ...
         else:
             语句块 
    语法说明：
        elif 子句可有0、1或者多个
        else 子句可有0或1个，且只能放在if语句的最后   
    要求：if语句内部的语句通常要以4个空格的缩进来表达包含关系，相同的缩进格式代表相同的所属      级别 
if语句嵌套
    if语句本身是由多条语句组成的一条复合语句
    if语句可以作为语句嵌套到另一个语句的内部

条件表达式
    语法：
        表达式1 if 真值表达式 else 表达式2
    作用：
        如果真值表达式的布尔环境值为True，则执行表达式1并返回结果的引用，否则执行表达式2并返回结果的引用

pass语句
	作用：通常用来填充语法空白
	pass 语句又名空语句
	语法：
	    pass

布尔运算
	not   and    or
	非     与    或

	not语法：
	    not x
	作用：对x进行布尔取值，如bool(x)为True，则返回False，否则返回True
	示例：not True # False
	      not False # true
	      not 100  # False
    and语法:
    	x and y
    	注：x,y为表达式
    作用：
    	优先返回假值对象
    	当bool(x)的值为False时，返回x，否则返回y
    示例：True and True    # True
          True and False   # False
          False and True   # False
          False and False  # False
    or语法：
    	x or y
    作用：
        优先返回真值对象，当x为True时返回x，否则返回y
    示例：True or True     # True
    	  True or False    # True
    	  False or True    # True
    	  False or Falsee  # False
    	  100 or 200       # 100
    	  100 or 1.00      # 100
    	  0 or 200         # 200
    	  0 or 0.0         # 0
正负号运算符：
	+ -
	语法：
		+ 表达式
		- 表达式
	示例：
		a = 5
		b = -a
		c = +a
练习：
    1.出租车计费标准
      x<3    13
      x>3    2.3/km
      空驶费，>15km,每公里加收基本单价的50%作为返程空驶费（3.45元 /km）
    要求：输入公里数，打印出费用金额（四舍五入）
    2.输入学生的三科成绩：
        1.打印出最高分
        2.打印出最低分
        3.打印出平均分  
    3.给出一个年份，判断是否为闰年并打印结果
        规则：四年一闰，每百年不闰，四百年又是一个闰年
    4.BMI指数，以身体质量指数
        公式:BMI = 体重（公斤）/ 身高（米）的平方
        标准表：BMI < 18.5  过轻
                18.5<=BMI<=24 正常
                BMI > 24 超标
        输入身高体重，打印出BMI值，并打印体重状况






字符串 str 
    作用：用来记录文本（文字）信息
    表达方式：
    	1.在非注释中，凡是用引号括起来的部分都是字符串,'(单引号)  "(双引号)  '''(三单引号)   """(三双引号) 
    	2.空字符串的字面值表示方式：''  ""  ''''''  """""" 
    	3.非空字符串的字面值表示方式：'hello' "hello" '''hello'''  """hello"""
    	4.单双引号的区别：单引号内的双引号不算结束符；双引号内的单引号不算结束符
    三双引号字符串：
    	作用：
    		三引号字符串的换行会自动转换为换行符'\n'
    		三引号内可以包含单引号和双引号（包括三单、三双引号）
    	表示方式：
    		'welcome to China\nI like python\nI am studing'
    		'''welcome to China
    		   I like python
    		   I am studing'''
	用转义序列代表特殊字符：
		字符串字面值中，用字符（\）后跟一些字符代表一个字符
	字符串中的转义字符表：
		\'   代表一个单引号
		\"   代表一个双引号
		\\   代表一个反斜杠
		\n   换行
		\r   返回光标至首行
		\f   换页
		\t   水平制表符
		\v   垂直制表符
		\b   倒退
		\0   空字符，字符值为0
		\0oo  oo为两位八进制表示的字符
		\xXX  XX为两位十六进制表示的字符
		\uXXXX  Unicode16的十六进制表示的字符
		\UXXXXXXXX  Unicode32的十六进制表示的字符

		Unicode16(65536个)/Unicode32(2^32个)

ASCII编码：
	ASCII编码 字表符（2^7）
	$ man ascii 
常用的ASCII编码：
字符     十进制      十六进制
'0'			48			0x30
'A'			65			0x41
'a'			97			0x61
 
raw 字符串（原始字符串）
	字面值格式：
		r'字符串内容'	
		r"字符串内容"
		r'''字符串内容'''
		r"""字符串内容"""
	作用：
		让转义字符\无效
	示例：
		a = 'C:\newfile\test.py'
		print(a)
		print(len(a)) #得到字符串的长度
		a = r'C:\newfile\test.py'
		print(a)
		print(len(a))
字符串的运算：
	算是运算符：
	+ += * *= /
	+ 加号运算符，用于字符串的拼接	
	  例：
	  	x = 'abcd' + 'efg'
	  	print(x)  #abcdefg
	  	x += '123'
	  	print(x) #abcdefg123
	* 乘号运算符，用于生成重复的字符串
	  例：
		x = '123'
	    y  = x * 2  # y = '123123' 	
	    x = '123'
	    x  *=  2  # x = '123123' 	

字符串的比较运算
	运算符：
		> >= < <= == !=
	示例:
		'A' < 'B'      #True	    
		'B' < 'a'      #True	    
		'ABC' > 'AB'   #True	    
		'AD' < 'ABC'   #False   
		'ABC' == 'abc' #False   
    in / not in 运算符
    	作用：
    		in用于序列，字典，集合中，用于判断某个值是否存在于容器中，若存在，返回True，否则返回False
    	格式：
    		对象 in 容器 
    	示例：
    		s = 'welcome to China'
    		'to' in s   # True
    		'e t' in s   # True
    		'lalal' in s  # Fals
字符串的索引操作:
	python 字符串str 是不可以改变的字符序列
	索引语法：
		字符串[整数表达式]
	说明：
		序列都可以用索引（index）来访问序列中的对象（元素）
		序列的正向索引时从0开始的，第二个索引为1，位后一个索引为len(s)-1
		序列的反向索引时从-1开始的，-1代表最后一个，-2位到时第二个，第一个是-len(s)
		s = 'abdefg'
		print(s[0])  # a
		print(s[-1]) # g
切片 slice
	从字符串序列中去除相应的元素重新组成一个字符串序列
	语法：
		序列名[(开始索引b):(结束索引e)(:(步长s))]	
	语法说明：
		开始索引时切片开始切下的位置，0代表第一个
		结束索引时切片的终止索引（但不包含终止点）
		步长是切片每次获取玩当前元素后移动的方向和偏移量
		1）没有步长，相当于取值完成后向右移动一个索引的位置（默认为1）	
		2）当步长为正数时，取正向切片,步长默认为1，开始索引默认为0，结束索引默认为len(s)
		3）当步长为负整数时，取反向切片，反向切片时，默认的初始位置为最后一个元素，终止位置是第一个元素的前一个位置
	示例：
	    s = 'abdefg'
		print(s[0:4])  # abde
		pirnt(s[:3])   # abd
		pirnt(s[2:])   # defg
		pirnt(s[1:1])  # ''
		pirnt(s[1:1])  # ''
		pirnt(s[3:1])  # ''
		pirnt(s[::-1]) # 'gfedba'
		pirnt(s[2::-2]) # 'da'
     判断回文：
     	s = input('请输入字符：')
		if s[:] == s[::-1]:
   		    print('您输入的是回文')
		else:
    		print('您输入的不是回文')

python3中常用的序列函数：
	len(seq)    返回序列的长度
	max(x)      返回序列的最大值元素
	min(x)      返回序列的最小值元素
示例：
	s == 'abcde'
	len(s)   # 5
	max(s)   # e
	min(s)   # a
 
字符串编码转换函数
	ord(c) 返回一个字符串的Unicode编码值
	chr(i) 返回i这个值对应的字符
示例：
	print(ord('A'))   #65
	print(ord('中'))  #20013
	print(chr(65))    #'A'
	print(chr(20013)) #'中' 
整数转化为字符串函数：
	hex(i) 将整数转化为十六进制的字符串
	oct(i) 将整数转化为八进制的字符串
	bin(i) 将整数转化为二进制的字符串
字符串的构造(创建)函数str
	str(obj='') 将对象转换为字符串
 	示例：
 		s = 123
 		print(str(s)+'456')  # 123456


常用的字符串方法
	字符串方法的调用语法
		见str.html
		对象.方法名(方法传参) 
		注：
			对象的调用属于表达式，通常可以返回一个值或None
		示例：
			S.isalpha()
			S.isdigit()
			S.count(sub[,start[,end]])
			S.find(sub[,start[,end]])
			S.replace(old,new[,count])
			S.starswith(prefix[,star[,end]])
			S.endswith(prefix[,star[,end]])

			'abc'.isalpha()  #正确
			123.isalpha()		
	字符串的格式化表达式
		见str.html
		作用：
			生成一定格式的字符串
		运算符：%
		语法格式：
			格式字符串 % 参数值
			格式字符串 % (参数值1，参数值2...)
		说明：
			格式化字符串中以%开头的为占位符，占位符的位置将用参数值替换
			% 右侧为参数值，当有多个参数值时用括号()括起来，之间用逗号分隔
		常用占位符类型码：
			d%(十进制整数) s%(字符串)
		    f%(浮点十进制形式) %%(等同于一个%字符)
		示例：
			fmt = '姓名：%s,年龄：%d'
			name = 'tarena'
			age = 15
			print(fmt % (name,age))
	占位符和类型码之间的格式语法
		[格式语法] 类型码
		格式语法;
			- 左对齐
			+ 显示正号
			0 补零
			宽度(整数)
			宽度.精度(整数)
		示例：
			'%10d' % 123      # '       123'
			'%-10d' % 123     # '123       '
			'%10s' % 'abc'    # '       abc'
			'%-5s' % 'abc'    # 'abc  '
			'%05d' % 123      # '00123'
			'%7.3f' % 3.1415926     # '003.141'

		输入三行文字，依次以20字符的宽度右对齐输出






循环语句
	while 语句
		作用：
			根据一定条件，重复执行一条语句或多条语句
		语法：
			while 真值表达式：
				语句块
			else：
				语句块
		语法说明：
			1.先执行真值表达式，判断True/False
			2.如果为True则执行语句块1，然后跳转到第一步
			3.如果为False则执行wlse子句部分的语句块2，然后结束此
			while语句的执行，如果没有else语句，直接结束循环
			4.else字句部分可以省略
		while注意事项：
			1.要控制真值表达式来访问死循环
			2.通常用真值表达式内的变量来控制循环条件
			3.通常要在循环语句块内改变循环变量来控制循环的数和变量的走向
		示例：
			i = 1
			while i < 20:
    			print('hello world')
    			i += 1
			else:
   			    print('条不满足，循环结束')
   		while语句嵌套
   			while语句本身是语句，和其他与句一样，可以放在其他复合语句内部
   		while嵌套示意：
   			while 真值表达式：
   				...
   				while 真值表达式2：
   					...
   				else：
   					...
   			else：
   				...
        注:注意控制各个层级的循环控制变量的位置

	break语句
	作用：
		用于循环语句(while，for)中，用来终止循环语句的执行
	说明：
		1.当break语句执行后，此循环语句break之后的语句将不再执行
		2.break语句通常和if语句组合使用
		3.break语句终止循环时，循环语句的else子句将不会再执行
		4.break语句只能终止当前循环语句的执行，如果有循环嵌套时，不会跳出嵌套的外重循环
		5.break语句只能在循环语句（while或for语句）内部使用
死循环
	死循环是指循环条件一直成立的循环
	死循环通常用break语句来终止循环
	死循环的else语句永远不会执行
示例：
	while True：
		n =int(input('请输入：'))
		if n == 0
			break
		print(n)

	for 语句
		作用：
			用来遍历可迭代对象的数据元素
		可迭代对象是指能依次获取数据元素的对象
		可迭代对象包括：
			字符串 str
			列表 list
			元组 tuple
			字典 dict
			集合 set
			...
		语法：
			for 变量列表 in *可迭代对象*：
				语句块1
			else：
				语句块2
		语法说明：
			1.可迭代对象每次提供一个元素依次赋值被变量列表中的变量，赋值完毕后执行语句块1，重复执行此步骤，直到可迭代对象不能提供数据为止
			2.*可迭代对象提供完所有元素后，执行else子句部分的语句块2，然后退出此for语句*
			3.else子句部分可以省略(与while语句类似)
			4.*当在循环内部用break终止循环时，else子句部分不会执行*
        示例：
        	#判断输入字符的空格数量
			s = input('请输入字符：')
			i = 0
			for ch in s:
 			   if ch == ' ':
 			       i += 1
			print('空格个数：',i)
	range函数：
		格式见：
			--->help(range)
	函数：
		range(stop)  *从零开始*，每次生成一个整数后加1操作，知道stop为止(不包含stop)
		range(start,stop[,step]),从start开始，每次生成一个整数后移动step，直到stop为止(不包含stop，切step可以是负整数)
	作用：
		用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)
	示例：
		range(4)        #生成0,1,2,3
		range(3,6)      #生成3,4,5
		range(1,10,2)   #生成1,3,5,7,9
		range(5,0,-2)   #生成5,3,1
		range(4,0)      #空

	for语句嵌套：
		for语句内部可以放任意语句，包括for语句和while语句
	示例：
		for x in 'abc':
			for y in '123':
				print(x,'+',y,'=',x + y)
        # a + 1 = a1
		# a + 2 = a2
		# a + 3 = a3
		# b + 1 = b1
		# b + 2 = b2
		# b + 3 = b3
		# c + 1 = c1
		# c + 2 = c2
		# c + 3 = c3
continue语句
	作用：
		用于循环语句（while和for）中，不再执行Benin执行本次循环内continue之后的语句，重新开始一次新的循环
	说明：
		1.在while语句中，执行continue语句将会直接跳转到while语句的真值表达式处重新判断循环条件
		2.在for语句中，执行continue语句，将会从可迭代对象中取下一个元素绑定变量后再次进行循环
	示例
		for x in range(5):
			if x == 2:
				continue
			print(x)  #0 1 3 4
循环总结：
	while语句(使用广泛)
	for语句(仅适用于可迭代对象)
		-字符串
		-range()函数
	break语句
	continue语句











列表 list
	列表时由一系列特定元素组成的，元素和元素之间没有任何关联关系，但他们之间有先后顺序关系
	列表是一种容器
	列表是序列的一种
	列表是可以被改变的序列
python中的序列类型简介(sequence)
	字符串 str
	列表 list
	元组 tuple
	字节串 bytes
	字节数组 bytearray
创建空列表的字面值
	L = []  # 绑定空列表
创建非空列表：
	L = [1,2,3,4]  
	L = ['中国','挪威','芬兰']  
	L = [1,'two',3,四]  
	L = [1,2,[3.1,3.2,3.3],4]  
列表的构造（创建）函数list
	list() 生成一个空的列表 等同于[]
	list(iterable) 用可迭代对象传建一个列表
示例：
	L = list() L为空列表
	L = list('abcd') # L->['a','b','c','d']
	L = list(range(1,10,2)) # L->[1,3,5,7,9]
列表的运算：
	算数运算
	+ += * *=

	+用于拼接列表
	x = [1,2,3]
	x = [4,5,6]
	x + y = [1,2,3,4,5,6]

	+= 用于原列表与右侧*可迭代对象*进行拼接，生成新的列表
	x = [1,2,3]
	x += [4,5,6]   # x = [1,2,3,4,5,6]
	x = [1,2,3]
	x += 'abc'   # x = [1,2,3,'a','b','c']

	*用于生成重复的列表
	x = [1,2,3]*2   # x = [1,2,3,1,2,3]

	*=用于生成重复的列表，同时用变量绑定新列表
	x = [1,2]
	x *= 3    # x = [1,2,1,2,1,2]
列表的比较运算：
	< <= > >= == !=
	x = [1,2,3]
	y = [4,5,6]
	x != y      #True
	x > [1,2]   #True
	x < y       #True
	[1,3,2] > [1,2,3]   #True
	['AB','CD'] > ['AC','BD']   #False
	[1,'two'] > ['two',1]   #TypeError
列表的in / not in
	1.in 判断一个数据元素是否存在于容器（列表）中，如果存在返回True，否则返回False
	2.not in 的返回值与in运算符相反
示例：
	x = [1,'Two',3.14,'四']
	1 in x      #True
	2 in x      #False
	3 not in x      #True
	'四' not in x      #False
列表的索引index/切片slice
	列表的索引语句：
		列表[整数表达式]
	用法：
		列表的索引取值与字符串的索引取值规则完全相同
		列表的索引分为正向索引和反向索引
	示例：
		L = ['A',2,'B',3]
		print(L[1])    # 2
		x = L[2]       # x = 'B'
列表的索引赋值
	列表时可变的序列，可以通过索引赋值改变列表中的元素
语法：
	列表[索引] = 表达式
示例：
	x = [1,2,3,4]
	x[2] = 3.14   #改变了第三个元素的值    
列表的切片
	列表[:]
	列表的[::]
	列表的切片取值返回一个列表，规则等同于字符串的切片规则
	示例：
		x = list(range(9))
		y =  x[1:9:2]    # y = [1,3,5,7]
列表的切片赋值语法：
	列表[切片] = 可迭代对象
	说明：
		切片赋值的赋值运算符的右侧必须是一个可迭代对象
	示例：
		L = [2,3,4]
		L[0:1] = [1.1,2.2]
		print(L)   # [1.1,2.2,3,4]

		L = [2,3,4]
		L[:] =[7,8]

		L = [2,3,4]
		**L[1:2] =[7,8]  #L = [2,7,8,4]**

		L = [2,3,4]
		**L[1:1] =[7,8]  #L = [2,7,8,3,4]**

		L = [2,3,4]
		**L[1:1] =[7,8]  #L = [2,7,8,3,4]**

		L = [2,3,4]
		**L[3:3] =[7,8]  #L = [2,3,4,7,8]**
		L = [1,2,3,4,5,6]
		**L[1::2] =[1.1,2.2,3.3]  #L = [1,1.1,3,2.2,5,3.3]**
	切片注意事项：
		对于步长不等于1的切片赋值，赋值运算符的右侧可迭代对象提供的元素个数一定要等于切片切出的段数
		如：
			L = [1,2,3,4,5,6]
			L[::2] =['ABCD']  #错
			L[::2] =['ABC']   #对


del 语句用于删除列表元素
	语法
		del 列表[索引]
		del 列表[切片]
	示例：
		L = [1,2,3,4,5,6]
		del L[0]   #L = [2,3,4,5,6]
		del L[-1]   #L = [1,2,3,4,5]

		L = [1,2,3,4,5,6]
		del L[::2]   #L = [2,4,6]

python3中常用的序列函数
	len(x)  返回序列的长度
	max(x)  返回序列的最大元素
	min(x)  返回序列的最小元素
	sum(x)  返回序列中所有元素的和（元素必须是数值类型）
	any(x)  真值测试，如果列表中其中一个值为真值则返回True，否则False
	all(x)  真值测试，如果列表中其中所有值为真值则返回True，否则False

python3中常用的列表方法：
	见：list.html
	L.index(v [, begin[, end]])	返回第一个对应元素的索引下标
	L.insert(index, obj)   将某个元素插放到列表中指定的位置，其余元素位置不变（数据量大，不推荐）
	L.count(x)	返回列表中对应元素的个数
	L.remove(x) 从列表中删除第一次出现在列表中的相应值
	L.pop([index])	删除索引对应的元素，如果不加索引，默认删除最后元素，同时返回删除元素的引用关系
	L.copy()	复制此列表（只复制一层，不会复制深层对象)
	L.append(x)	向列表中追加*单个*元素（可以为列表等）
	L.extend(lst)	向列表追加另一个列表，与 += 作用近似
	L.clear()	清空列表,等同于 L[:] = []
	L.sort(reverse=False)	将列表中的元素进行排序，默认顺序按值的小到大的顺序排列
	L.reverse()	列表的反转，用来改变原列表的先后顺序

字符串文本解析方法 split 和 join
	S.split(sep=None)
    将字符串使用sep作为分隔符分割S字符，返回分割后的字符串的列表，当不给定参数时，用空白字符作为分隔符进行分割
    S.join(iterable)用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串
	例：
		s = 'Beijing is capital'
		L = s.split(' ')  # L = ['Beijing','is','capical']
		s = '\\'
		L = ['C:','Programe files','python3']
		s2 = s.join(L) 
深拷贝 deep copy和浅拷贝 shallow copy
浅拷贝
	是指在复制过程中只赋值一层变量，不会赋值深层变量绑定的对象的复制过程
	L = [3.1,3.2]
	L1 = [1,2,L]
	L2 = (L1).copy    #浅拷贝
	print(L1)      #[1,2,[3.1,3.2]]
	print(L2)      #[1,2,[3.1,3.2]]
	L2[2][1] = 0 
	print(L1)      #[1,2,[3.1,0]]
	print(L2)      #[1,2,[3.1,0]]
	print(L)       #[3.1,0]
深拷贝
	import copy    #导入copy模块
	L = [3.1,3.2]
	L1 = [1,2,L]
	L2 = copy.deepcopy(L1)    #深拷贝
	print(L1)      #[1,2,[3.1,3.2]]
	print(L2)      #[1,2,[3.1,3.2]]
	L2[2][1] = 0 
	print(L1)      #[1,2,[3.1,3.2]]
	print(L2)      #[1,2,[3.1,0]]
注：
	深拷贝通常只对可变对象进行复制，不可变对象通常不变


列表推导式 list comprehension
	列表推导式是用可迭代对象依次生成带有多个元素的列表的表达式
作用：
	用简易方法生成列表
语法：
	[表达式 for 变量 in 可迭代对象] 
	或
	[表达式 for 变量 in 可迭代对象 if 真值表达式] 
示例：
	# 以下生成1-100以内的奇数的列表
	L = [x for x in range(1,100,2)]
	或
 	L = [ i for i in range(1,100) if i % 2 == 1]

 列表推导式的嵌套：
 	语法：
 		[表达式1 
 			for 变量1 in 可迭代对象1 if 真值表达式1
 				for 变量2 in 可迭代对象2 if 真值表达式2
 					...]
 	示例：
 		L1 = [2,3,5]
 		L2 = [7,11,13]
 		#将L1中的全部元素与L2中的元素依次相乘后放到L3中
 		L3 = [x * y for x in L1 for y in L2]
 		print(L3) #[14, 22, 26, 21, 33, 39, 35, 55, 65]












元组 tuple
	元组时不可改变的序列，同list一样，元组可以存放任意类型的元素，一旦元组生成，则它不可以改变
元组的表示方式
	用小括号()括起来，单个元素括起来用逗号(,)区分是单个对象还是元组
创建空元组的字面值
	t = ()
创建非空元组的字面值
	t = 200,
	t =(200,)
	t =(1,2,3)
	t =100,200,300
元组的错误示例
	t = (20)  # t 绑定整数
	x,y,z = 100,200,300  # 序列赋值 x = 100 y = 200 z = 300
	x,y,z = 'ABC'        # x = 'A' y = 'B' z = 'C' 
	x,y,z = [10,20,30]   # x = 100 y = 200 z = 300

元组的构造函数 tuple
	tuple() 生成一个空的元组，等同于()
	tuple(iterable) 用可迭代对象生成一个的元组
	示例：
	t = tuple() t为空元组
	t = tuple('abcd') # L->(a,b,c,d)
	t = tuple(range(1,10,2)) # L->(1,3,5,7,9)
	t = tuple([1,2,3,4]) # L->(1, 2, 3, 4)
元组的算术运算
	+ += * *=
	用法与列表的用法完全相同(不同：运算后生成新的元组对象，而列表不会)
元组的比较运算
	> >= < <= == !=
	用法与列表的用法完全相同
in / not in
索引取值
切片取值
	规则与列表完全相同
区别：
	元组时不可变对象，不支持索引赋值和切片赋值
元组的方法（用法同list中的index与count方法）
	t.index(v[,begin[,end]])
	用于获取元组中v元素的索引
	t.count(v)
	用于获取元组中v元素的个数


可以用于序列的函数：
	len,max,min,sum,all,any
三个构造函数：
	str(obj)
	list(literable)
	tuple(literable)
	用于创建对应对象

其它函数：
	reversed(seq)  返回反向顺序的可迭代对象
	sorted(iterable,reverse=False)   返回已排序的列表
示例：
	for x in reversed('ABCD'):
		print(x)     # D C B A
	L = [3,4,7,2,6]
	L2 = sorted(L) 
	print(L2)        # [2,3,4,6,7]
	L3 = sorted(L,reverse=True)
	print(L3)        # [7,6,4,3,2]
	print(L)         # 不变




字典 dict
	1.字典是一种可变的容器，可以存储任意类型的数据
	2.字典中的每个数据都是用'键'(key)进行索引，而不是像序列可以用下标来进行索引
	3.字典的数据没有先后顺序关系，字典的存储是无序的
	4.字典中的数据以键(key)-值(value)对进行映射存储
	5.字典的键不能重复，*且只能用不可变类型作为字典的键*
字典的字面值表示方式：
	用{}括起来，以冒号(:)分割建-值对，各键值对用逗号分隔开

创建空字典
	d = {}
创建非空字典
	d = {'name':'tarena','age':15}
	d = {'姓名':'小张'}
	d = {1:'壹',2:'贰'}

字典的构造函数dict
	dict()   创建一个空字典，等用于{}
	dict(iterable)   用可迭代对象初始化一个字典
	dict(**kwargs)   关键字传参形式生成一个字典
示例：
	d = dict()
	d = dict([('name','tarena'),('age',15)])
	d = dict([name='tarena',age=15])


不可变类型：
	int,float,complex,bool,str,tuple,frozenset(固定集合),bytes(字节串)
可变类型：
	list,dict,set(集合),bytearray(字节数组)

字典的键索引：
	用[]运算符可以获取字典内'键'所对一个的'值'
		语法：
			字典[键]
	获取数据元素
		d = dict(name='tarena',age=15)
		print(d['age'])   #15
添加/修改字典元素
	字典[键] = 表达式
示例：
	d = {}
	d['name'] = 'tarena'   #创建一个新的键值对
	d['age'] = 15   #创建键值对
	d['age'] = 17   #修改键值对

del 语句删除字典的元素
	语法：
		del 字典[键]
	示例：
		d = {'name':'china','pos':'asia'}
		del d['pos']     
		print(d)         #{'name'='china'}
		del d['name']
		print(d)         #{}
字典的in/not in运算符
	可以用in运算符来判断一个'键'是否存在于字典中，如果存在则返回True,否则返回False
	not in 与in 返回值相反

	示例：
		d = {'a':1,'b':2}
		'a' in d      #True
		1 in d        #False
		100 not in d  #True
		2 not in d    #True
字典的迭代访问：
	字典是可迭代对象，只能对键进行迭代访问
	d = {'name':'tarena',(2002,1,1):'生日'}
	for x in d:
		print(x)      #'name'
		              #(2002,1,1)
可以用用于字典的内建函数
	len(x) 返回字典键—值对的个数
	max(x) 返回字典键的最大值
	min(x) 返回字典键的最小值
	sum(x) 返回字典所有键的和
	any(x) 真值测试，只对键进行测试，如果其中一个键为True，则返回True
	all(x) 真值测试，只对键进行测试，所有键为True时，返回True
字典常用方法：
	D.clear()	清空字典
	D.pop(key)	移除键，同时返回此键所对应的值
	D.copy()	返回字典D的副本,只复制一层(浅拷贝)
	D.update(D2)	将字典 D2 合并到D中，如果键相同，则此键的值取D2的值作为新值
	D.get(key, default)	返回键key所对应的值,如果没有此键，则返回default
	D.keys()	返回可迭代的 dict_keys 集合对象
	D.values()	返回可迭代的 dict_values 值对象
	D.items()	返回可迭代的 dict_items 对象
	示例：
		d = {1:'一',2:'二',3:'三'}
		for x,y in d.items():
		...     print('键是：',x,'值是：',y)
		... 
		键是： 1 值是： 一
		键是： 2 值是： 二
		键是： 3 值是： 三
字典推导式：
	字典推导式是用可迭代对象依次生成字典内元素的表达式
	语法：
		{键表达式:值表达式 for 变量 in 可迭代对象[if 真值表达式]}
		注：[]内容代表可省略
	示例：
		d = {x : x**2 for x in range(10)}  # {0:0,1:1,2:4...9:81}

字典vs列表
	1.都是可变容器
	2.索引方式不同（列表用整数索引，列表用键索引）
	3.字典的查找速度可能快于列表（重要）
	4.列表的存储是有序的，字典的存储是无序的






集合 set
	集合是可变的容器
	集合的数据对象是唯一的（不能重复多次的）
	集合是无需的存储结构，集合中的数据没有先后关系
	*集合内的元素必须是不可变对象*(集合内的元素不能为列表与字典)
	集合是可迭代的
	集合是相当于只有键没有值得字典（键则是集合的数据）

创建空的集合
	s = set()   $创建一个空的集合 **s = {} 不是集合是空字典
创建非空的集合
	s = {1,2,3}   $集合中的三个整数1,2,3
集合的构造函数 set
	set(literable) 用可迭代对象创建一个新的集合对象
示例：
	s = set('ABC')       # s = {A,B,C}
	s = set('ABCCBA')    # s = {A,B,C}
	s = set({1:'一',2:'二',5:'五'})   # s = {1,2,5}
	s = set([1,3.14,False])           # s = {1,3.14,False}
	s = set((2,3,4,5))                # s = {2,3,4,5}
	s = set([2,[3,4],5])              # 错的，[3,4]可变不能为集合元素

集合的运算：
	交集 并集 补集 子集 超集
	& 生成两个集合的交集
		s1 = {1,2,3}
		s2 = {4,2,3}
		s = s1 & s2  # s = {2,3}
	| 生成两个集合的并集
		s1 = {1,2,3}
		s2 = {4,5,6}
		s = s1 | s2  # s = {1,2,3,4,5,6}
	- 生成两个集合的补集
		s1 = {1,2,3}
		s2 = {4,5,6}
		s = s1 - s2  # s = {1,2,3} s中的元素属于s1但不属于s2
	^ 生成两个集合的对称补集
		s1 = {1,2,3}
		s2 = {2,3,6}
		s = s1 ^ s2  # s = {1,6} s中的元素只属于s1或只属于s2
	< 判断一个集合是另一个集合的子集
	> 判断一个集合是另一个集合的超集
		s1 = {1,2,3}
		s2 = {2,3}	
		s1 > s2      # True 判断超集
		s2 < s1      # True 判断子集
	== != 集合相同/不同
		s1 = {1,2,3}
		s1 = {2,3,1}
		s1 == s2  # True
		s1 != s2  # False
	in / not in运算符
		等同于字典，in运算符用于集合中，当某个值存在于集合中，则为真，否则为假
		not in 与 in 返回值相反
		示例：
			s = {1,'two',3.14}
			1 in s           #True
			2 in s           #False
			3.14 not in s    #False
			4 not in s       #True

	python3中可用于集合的函数
		len(x) max(x) min(x) sum(x) any(x) all(x)

	集合是可迭代对象
		s = {1,2,3}
		for x in s:
			print(x)   # 1  2  3(顺序不定)
集合的方法：
	S.add(e)	在集合中添加一个新的元素e；如果元素已经存在，则不添加
	S.remove(e)	从集合中删除一个元素，如果元素不存在于集合中，则会产生一个KeyError错误
	S.discard(e)	从集合S中移除一个元素e,在元素e不存在时什么都不做;
	S.clear()	清空集合内的所有元素
	S.copy()	将集合进行一次浅拷贝
	S.pop()	从集合S中删除一个随机元素;如果此集合为空，则引发KeyError异常
	S.update(s2)	用 S与s2得到的全集更新变量S
	S.difference(s2)	用S - s2 运算，返回存在于在S中，但不在s2中的所有元素的集合
	S.difference_update(s2)	等同于 S = S - s2
	S.intersection(s2)	等同于 S & s2
	S.intersection_update(s2)	等同于S = S & s2
	S.isdisjoint(s2)	如果S与s2交集为空返回True,非空则返回False
	S.issubset(s2)	如果S与s2交集为非空返回True,空则返回False
	S.issuperset(...)	如果S为s2的子集返回True,否则返回False
	S.symmetric_difference(s2)	返回对称补集,等同于 S ^ s2
	S.symmetric_difference_update(s2)	用 S 与 s2 的对称补集更新 S
	S.union(s2)	生成 S 与 s2的全集
对于不可变的对象

集合推导式：
	用可迭代对象来创建集合的表达式
	语法：
		{表达式 for 变量 in 可迭代对象 [if 真值表达式]}
	示例：
		L = [2,3,4,5,6,7,11,2,4,3,5]
		s = {i ** 2 for i in L}  # s = {4,9,16,25,36,49,121}
集合推导式的嵌套规则与列表推导式相同



固定集合 frozenset
	固定集合是不可变的，无序的，含有唯一元素的集合
作用：
	固定集合可以作为字典的键，也可以作为集合的值
创建空的固定集合：
	fs = frozenset()
创建非空的固定集合：
	fs = frozenset([1,2,3,4,6])

构造函数：
	frozenset()
	frozenset(可迭代对象) # 同set函数一致，返回固定集合

固定集合的计算：
	& 交集
	| 并集
	- 补集
	^ 对称补集
	> >= < <= == !=
	in / not in
	以上运算规则等同于set的用法
固定集合的方法：
	相当于集合的全部方法去掉修改集合的方法



阶段总结

数据类型：
	不可变数据类型：
		bool int float complex str tuple frozenset bytes
	可变数据类型：
		list dict set bytearray
值：
	None True False ...
运算符：
	+ - * / // % **
	> >= < <= == !=
	is / is not
	in / not in 
	and or not
	& | ^
	+(正号) -(负号)
表达式(可以作为赋值运算中的右值，一定有返回值)：
	1 
	1 + 2
	len([1,2,3])
	条件表达式：x if x > y else y
	全部的推导式：
		列表，字典，集合推导式（三种）
语句：
	表达式语句：
		print('abc')
		'hello'
	赋值语句
		a = 100
		a = b = c = 200
		a,b =100,200(序列赋值)
	if 语句
	while 语句
	for 语句
	break 语句
	continue 语句
	pass 语句
	del 语句
内建函数：
	len()
	max()
	min()
	sum()
	any()
	all()
	------------
	构造函数
	bool(x)
	int(x)
	float(x)
	complex(x)
	str(x)
	list(x)
	tuple(x)
	dict(x)
	set(x)
	frozenset(x)
	-------------
	abs(x)
	round(x)
	pow(x,y...)
	-------------
	bin(x)
	oct(x)
	hex(x)
	chr(x)
	ord(x)
	-------------
	range([start,]stop[,step])
	-------------
	input(x)
	print(...)











